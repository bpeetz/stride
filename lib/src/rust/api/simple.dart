// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.26.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../task.dart';
import '../task/annotation.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<TaskRepository>>
@sealed
class TaskRepository extends RustOpaque {
  TaskRepository.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  TaskRepository.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TaskRepository,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TaskRepository,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TaskRepositoryPtr,
  );

  Future<void> add({required Task task, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryAdd(
        that: this,
        task: task,
      );

  Future<void> delete({required UuidValue uuid, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryDelete(
        that: this,
        uuid: uuid,
      );

  static Future<TaskRepository> load({required String path, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryLoad(path: path, hint: hint);

  Future<Task?> taskByUuid({required UuidValue uuid, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryTaskByUuid(
        that: this,
        uuid: uuid,
      );

  Future<List<Task>> tasks({dynamic hint}) =>
      RustLib.instance.api.taskRepositoryTasks(
        that: this,
      );

  Future<List<Task>> tasksByDescription(
          {required String search, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryTasksByDescription(
        that: this,
        search: search,
      );

  Future<bool> update({required Task task, dynamic hint}) =>
      RustLib.instance.api.taskRepositoryUpdate(
        that: this,
        task: task,
      );
}
