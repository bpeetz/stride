// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../git/known_hosts.dart';
import '../task.dart';
import 'filter.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'settings.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `default_branch_name`, `get`, `ssh_key`
// These types are ignored because they are not used by any `pub` functions: `SETTINGS_INSTANCE`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `deref`, `fmt`, `fmt`, `fmt`, `initialize`

@freezed
class Repository with _$Repository {
  const Repository._();
  const factory Repository({
    required String origin,
    required String author,
    required String email,
    required String branch,
    UuidValue? sshKeyUuid,
  }) = _Repository;
  static Future<Repository> default_() =>
      RustLib.instance.api.crateApiSettingsRepositoryDefault();
}

@freezed
class Settings with _$Settings {
  const Settings._();
  const factory Settings.raw({
    required bool darkMode,
    required List<SshKey> keys,
    required KnownHosts knownHosts,
    required Repository repository,
    required bool periodicSync,
    required List<Filter> filters,
    FilterSelection? selectedFilter,
  }) = _Settings;
  static Future<Settings> default_() =>
      RustLib.instance.api.crateApiSettingsSettingsDefault();

  static Future<Settings> load() =>
      RustLib.instance.api.crateApiSettingsSettingsLoad();

  factory Settings() => RustLib.instance.api.crateApiSettingsSettingsNew();

  static Future<void> save({required Settings settings}) =>
      RustLib.instance.api.crateApiSettingsSettingsSave(settings: settings);
}

@freezed
class SshKey with _$SshKey {
  const SshKey._();
  const factory SshKey({
    required UuidValue uuid,
    required String public,
    required String private,
  }) = _SshKey;
  static Future<SshKey> generate() =>
      RustLib.instance.api.crateApiSettingsSshKeyGenerate();
}
